collections v2
==============

Collection
----------
owner = models.ForeignKey(settings.AUTH_USER_MODEL,
                          related_name='collections', on_delete=models.CASCADE)
title = models.CharField(null=False, max_length=255)
description = models.TextField(max_length=3000)
keywords = ArrayField(models.CharField(max_length=50), null=True)
omitted = ArrayField(models.IntegerField(), blank=True, default=default_omitted)

rel_keywords = ArrayField(models.CharField(max_length=30), blank=True, null=True)

creator = models.CharField(null=True, blank=True, max_length=500)
contact = models.CharField(null=True, blank=True, max_length=500)
webpage = models.URLField(null=True, blank=True)

collection_class = models.CharField(choices=COLLECTIONCLASSES, max_length=12)

image_file = ResizedImageField(size=[800, 600], upload_to=collection_path, blank=True, null=True)
file = models.FileField(upload_to=collection_path, blank=True, null=True)

created = models.DateTimeField(null=True, auto_now_add=True)

status = models.CharField(max_length=12, null=True, blank=True, choices=STATUS_COLL, default='sandbox')
featured = models.IntegerField(null=True, blank=True)

datasets = models.ManyToManyField("datasets.Dataset", blank=True)
places = models.ManyToManyField("places.Place", blank=True)




















  @property
  def collaborators(self):
    team_ids = self.collabs.values_list('user_id', flat=True)
    return User.objects.filter(id__in=team_ids) | User.objects.filter(groups__name='whg_team')


























  @property
  def ds_counter(self):
    from collections import Counter
    from itertools import chain
    dc = self.datasets.all().values_list('label', flat=True)
    dp = self.places.all().values_list('dataset', flat=True)
    all = Counter(list(chain(dc, dp)))
    return dict(all)

  @property
  def ds_list(self):
    dsc = [{"id":d.id, "label":d.label, "bounds": d.bounds,
            "title":d.title, "modified": d.last_modified_text} for d in self.datasets.all()]
    dsp = [{"id":p.dataset.id, "label":p.dataset.label, "title":p.dataset.title #, "bounds": p.dataset.bounds
            ,"modified": p.dataset.last_modified_text
            } for p in self.places.all()]
    return list({ item['id'] : item for item in dsp+dsc}.values())























  @property
  def last_modified_iso(self):
    # TODO: log entries for collections
    return self.created.strftime("%Y-%m-%d")

  @property
  def owners(self):
    owner_ids = list(self.collabs.filter(role='owner').values_list('user_id', flat=True))
    owner_ids.append(self.owner_id)
    return User.objects.filter(id__in=owner_ids)


  @property
  def places_ds(self):
    dses = self.datasets.all()
    return Place.objects.filter(dataset__in=dses)






  @property
  def places_all(self):
    all = Place.objects.filter(
      Q(dataset__in=self.datasets.all()) | Q(id__in=self.places.all().values_list('id'))
    )
    return all.exclude(id__in=self.omitted)


  @property
  def rowcount(self):
    dses = self.datasets.all()
    ds_counts = [ds.places.count() for ds in dses]
    return sum(ds_counts) + self.places.count()


CollectionImage
---------------
collection = models.ForeignKey(Collection, default=None,
  on_delete=models.CASCADE, related_name='images')
image = models.FileField(upload_to=collection_path)
caption = models.CharField(null=True, blank=True, max_length=500)
uri = models.TextField(validators=[URLValidator()], null=True, blank=True)
license = models.CharField(null=True, blank=True, max_length=64)

