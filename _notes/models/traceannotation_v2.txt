v2
==
# needs: archived, image_file, include_matches
class TraceAnnotation(models.Model):
    collection = models.ForeignKey('collection.Collection', db_column='collection',related_name='collections', on_delete=models.CASCADE)
    place = models.ForeignKey('places.Place', db_column='place',related_name='places', on_delete=models.CASCADE)
    owner = models.ForeignKey(User, related_name='annotations', on_delete=models.CASCADE)

    anno_type = models.CharField(max_length=20, default='place', blank=True, null=True)
    archived
    created = models.DateTimeField(auto_now_add=True, null=False, blank=True)
    end = models.CharField(max_length=11, blank=True, null=True) # ISO8601 date, incl. '-'
    image_file
    include_matches
    motivation = models.CharField(max_length=20, default='locating') # choices? locating, describing
    note = models.CharField(max_length=2044, blank=True, null=True)
    relation = ArrayField(models.CharField(max_length=30), blank=True, null=True)
    saved = models.BooleanField(default=False)
    sequence = models.IntegerField(blank=True, null=True)
    src_id = models.CharField(max_length=2044, blank=True, null=True) # if exists
    start = models.CharField(max_length=11, blank=True, null=True) # ISO8601 date, incl. '-'
    when = JSONField(blank=True, null=True) # {timespans[[],...], periods[{name, uri}], label, duration}
