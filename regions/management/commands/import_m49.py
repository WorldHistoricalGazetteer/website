import json
from pathlib import Path
from django.core.management.base import BaseCommand
from regions.models import Region, RegionLabel

class Command(BaseCommand):
    help = "Import M49 regions from JSON into Django models"

    def add_arguments(self, parser):
        parser.add_argument(
            "--jsonfile", type=str, help="Path to m49_regions.json generated by scraper"
        )

    def handle(self, *args, **options):
        base_dir = Path(__file__).resolve().parents[2] / "data"
        jsonfile = Path(options["jsonfile"]) if options.get("jsonfile") else base_dir / "m49_regions.json"

        if not jsonfile.exists():
            self.stdout.write(self.style.ERROR(f"{jsonfile} does not exist"))
            return

        self.stdout.write(f"Loading {jsonfile} ...")
        with open(jsonfile, encoding="utf-8") as f:
            data = json.load(f)

        self.stdout.write(f"Processing {len(data)} entries ...")
        regions_map = {}  # m49 -> Region instance

        # 1. Create all Region objects
        for code, entry in data.items():
            region, _ = Region.objects.update_or_create(
                m49=entry["m49"],
                defaults={
                    "level": entry.get("level", "unknown"),
                    "iso_alpha2": entry.get("iso_alpha2", []),
                    "iso_alpha3": entry.get("iso_alpha3", []),
                },
            )
            regions_map[code] = region

        # 2. Create RegionLabel objects
        labels_to_create = []
        for code, entry in data.items():
            region = regions_map[code]
            for lang, name in entry.get("labels", {}).items():
                labels_to_create.append(
                    RegionLabel(region=region, lang=lang, name=name)
                )
        RegionLabel.objects.bulk_create(labels_to_create, ignore_conflicts=True)

        # 3. Set parent/children relationships
        for code, entry in data.items():
            region = regions_map[code]

            # parents
            parent_codes = entry.get("parents", [])
            parents = [regions_map[p] for p in parent_codes if p in regions_map]
            region.parents.set(parents)

            # members
            member_codes = entry.get("members", [])
            members = [regions_map[m] for m in member_codes if m in regions_map]
            region.members.set(members)

        self.stdout.write(self.style.SUCCESS("âœ“ M49 regions imported successfully"))
