# docker-compose-dev-minimal.yml

version: '2.19'

networks:
  WHG3:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  web:
    networks:
      - WHG3
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile-django.dev
    image: whg3_web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s
    command: /start
    container_name: web
    volumes:
      - .:/app
    env_file:
      - ./.env/.dev-whg3
    ports:
      - 8001:8000
    depends_on:
      - redis
      - db
#       - livereload

  webpack:
    networks:
      - WHG3
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./compose/local/webpack/Dockerfile-webpack
    image: whg3_webpack
    container_name: webpack
    logging:
      driver: local
    volumes:
      - .:/app

#   livereload: # https://github.com/tjwalch/django-livereload-server
#     image: whg3_web
#     networks:
#       - WHG3
#     platform: linux/amd64
#     command: /start-livereload
#     container_name: livereload
#     volumes:
#       - .:/app
#     env_file:
#       - ./.env/.dev-whg3
#     ports:
#       - 35729:35729

  db:
    networks:
      - WHG3
    platform: linux/amd64
    build:
      context: ./compose/local/postgres
      dockerfile: Dockerfile-postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s
    container_name: postgres
    volumes:
      - dev-db-data:/var/lib/postgresql/data
      - ./data:/app/data
    env_file:
      - ./.env/.dev-whg3
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust  # Allow all connections without password authentication
    ports:
      - 5432:5432

  redis:
    networks:
      - WHG3
    platform: linux/amd64
    image: redis:bullseye
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s
    container_name: redis
    ports: [6380:6379]

  celery_worker:
    image: whg3_web
    command: celery -A whg worker -l INFO
    container_name: celery_worker
    networks:
      - WHG3
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock:ro
    env_file:
      - ./.env/.dev-whg3
    depends_on:
      - redis
      - db

  celery_beat:
    image: whg3_web
    command: ["sh", "-c", "rm -f './celerybeat.pid' && celery -A whg beat -l INFO"]
    container_name: celery_beat
    networks:
      - WHG3
    volumes:
      - .:/app
    env_file:
      - ./.env/.dev-whg3
    depends_on:
      - redis
      - db

  flower:
    image: whg3_web
    command: >
      sh -c '
        until celery -A whg inspect ping; do
          echo "Celery workers not available" >&2;
          sleep 1;
        done;
        echo "Celery workers are available" >&2;
        celery -A whg --broker=${CELERY_BROKER} flower
      '
    container_name: flower
    networks:
      - WHG3
    volumes:
      - .:/app
    env_file:
      - ./.env/.dev-whg3
    ports:
      - 5557:5555
    depends_on:
      - redis
      - db
      
#   selenium_chrome:
#     image: selenium/standalone-chrome
#     container_name: selenium_chrome
#     networks:
#       - WHG3
#     ports:
#       - "4444:4444"
# 
#   selenium_firefox:
#     image: selenium/standalone-firefox
#     container_name: selenium_firefox
#     networks:
#       - WHG3
#     ports:
#       - "4445:4444"
#       
#   selenium_edge:
#     image: selenium/standalone-edge
#     container_name: selenium_edge
#     networks:
#       - WHG3
#     ports:
#       - "4446:4444"

volumes:
  app:
  dev-db-data:
